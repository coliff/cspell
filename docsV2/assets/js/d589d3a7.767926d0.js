"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[924],{1150:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=s(6106),t=s(5782);const l={title:"Getting Started with CSpell",categories:"docs",nav_order:2},r="Spell Checking",o={id:"getting-started",title:"Getting Started with CSpell",description:"Installation",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/docsV2/docs/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/streetsidesoftware/cspell/blob/main/docs/docs/getting-started.md",tags:[],version:"current",frontMatter:{title:"Getting Started with CSpell",categories:"docs",nav_order:2},sidebar:"tutorialSidebar",previous:{title:"How to Forbid Words",permalink:"/docsV2/docs/forbidden-words"},next:{title:"Working with Git",permalink:"/docsV2/docs/git"}},c={},d=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"1. Create a configuration file.",id:"1-create-a-configuration-file",level:2},{value:"2. Add words to the project dictionary",id:"2-add-words-to-the-project-dictionary",level:2},{value:"3. Fine-tuning",id:"3-fine-tuning",level:2},{value:"Command: <code>lint</code> -- Spell Checking",id:"command-lint----spell-checking",level:2},{value:"Help",id:"help-1",level:3},{value:"Options",id:"options",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"spell-checking",children:"Spell Checking"}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["See: ",(0,i.jsx)(n.a,{href:"/docsV2/docs/installation",children:"Installation"})]}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Example: recursively spell check all JavaScript files in ",(0,i.jsx)(n.code,{children:"src"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"JavaScript files"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'cspell "src/**/*.js"\n# or\ncspell lint "src/**/*.js"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Check everything"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'cspell "**"\n'})}),"\n",(0,i.jsx)(n.h1,{id:"adding-cspell-to-an-existing-project",children:"Adding CSpell to an existing project"}),"\n",(0,i.jsx)(n.p,{children:"In the steps below we will create a cspell configuration file and setup a single custom dictionary for the project."}),"\n",(0,i.jsx)(n.p,{children:"Steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#1-create-a-configuration-file",children:"Create a configuration file"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#2-add-words-to-the-project-dictionary",children:"Add words to the project dictionary"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"1-create-a-configuration-file",children:"1. Create a configuration file."}),"\n",(0,i.jsxs)(n.p,{children:["CSpell can use JSON, Yaml, and JavaScript files for configuration. It automatically searches for one of the following: ",(0,i.jsx)(n.code,{children:"cspell.json"}),", ",(0,i.jsx)(n.code,{children:"cspell.config.yaml"}),", ",(0,i.jsx)(n.code,{children:"cspell.config.cjs"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For now choose to use either JSON or Yaml. Below are examples of each that include a custom dictionary definition. Both of them are equivalent. If you have both, CSpell will look for the ",(0,i.jsx)(n.code,{children:".json"})," file first."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"cspell.json"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "$schema": "https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json",\n  "version": "0.2",\n  "dictionaryDefinitions": [\n    {\n      "name": "project-words",\n      "path": "./project-words.txt",\n      "addWords": true\n    }\n  ],\n  "dictionaries": ["project-words"],\n  "ignorePaths": ["node_modules", "/project-words.txt"]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"cspell.config.yaml"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"---\n$schema: https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json\nversion: '0.2'\ndictionaryDefinitions:\n  - name: project-words\n    path: './project-words.txt'\n    addWords: true\ndictionaries:\n  - project-words\nignorePaths:\n  - 'node_modules'\n  - '/project-words.txt'\n"})}),"\n",(0,i.jsx)(n.p,{children:"These configuration files do three things:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Define the custom dictionary ",(0,i.jsx)(n.code,{children:"project-words"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Tell the spell checker to use the custom dictionary."}),"\n",(0,i.jsxs)(n.li,{children:["Tell the spell checker to ignore any files inside of ",(0,i.jsx)(n.code,{children:"node_modules"})," and the file ",(0,i.jsx)(n.code,{children:"project-words.txt"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-add-words-to-the-project-dictionary",children:"2. Add words to the project dictionary"}),"\n",(0,i.jsx)(n.p,{children:"It might take a few iterations to get fully setup, but the process in the same."}),"\n",(0,i.jsx)(n.p,{children:"Steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create the dictionary file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"touch project-words.txt\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Choose a set of files to start with, like all Markdown files, ",(0,i.jsx)(n.code,{children:"**/*.md"})," and run the spell checker."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'cspell "**/*.md"\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Look for any directories that need to be ignored and add them to ",(0,i.jsx)(n.code,{children:"ignorePaths"}),". Example:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"bin"'})," - to ignore any directory / file called ",(0,i.jsx)(n.code,{children:"bin"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"translations/**"'})," - to ignore all files under the ",(0,i.jsx)(n.code,{children:"translations"})," directory."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"packages/*/dist"'})," - to ignore the ",(0,i.jsx)(n.code,{children:"dist"})," directory in each ",(0,i.jsx)(n.em,{children:"package"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Once you have finished identifying directories and files to be ignored, it is now time to add words to the custom dictionary."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Have CSpell populate it with the words from your project."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'echo "# New Words" >> project-words.txt\ncspell --words-only --unique "**/*.md" | sort --ignore-case >> project-words.txt\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This will append all new issues to the end of ",(0,i.jsx)(n.code,{children:"project-words.txt"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Review the words in ",(0,i.jsx)(n.code,{children:"project-words.txt"})," to check for any actual misspellings and remove them (the spell checker already thinks they are wrong)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Fix spelling issues."}),"\n",(0,i.jsx)(n.p,{children:"To show the issues and suggestions, use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'cspell --no-progress --show-suggestions --show-context "**/*.md"\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Repeat the process with the other file types you want to check."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-fine-tuning",children:"3. Fine-tuning"}),"\n",(0,i.jsx)(n.p,{children:"The following resources can help you with fine-tuning your configurations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docsV2/docs/forbidden-words",children:"Making words forbidden"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docsV2/docs/dictionaries-custom",children:"Defining Custom Dictionaries"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docsV2/docs/dictionaries",children:"About Dictionaries"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docsV2/docs/globs",children:"Understanding CSpell Globs"})}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"help",children:"Help"}),"\n",(0,i.jsxs)(n.h2,{id:"command-lint----spell-checking",children:["Command: ",(0,i.jsx)(n.code,{children:"lint"})," -- Spell Checking"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"lint"})," command is used for spell checking files."]}),"\n",(0,i.jsx)(n.h3,{id:"help-1",children:"Help"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cspell lint --help\n"})}),"\n",(0,i.jsx)(n.h3,{id:"options",children:"Options"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},5782:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(7378);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);